@page "/personal/account"

@using Blazored.Modal.Services
@inject ISnackbar Snackbar
@inject AuthService authService
@inject IModalService ModalService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@using pruebaMudBlazor.Client.Services
@using pruebaMudBlazor.Client.Models
@inject IClienteService ClienteService
@inject ThemeService themeService
@inject ChatService chatService

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudContainer Class="mt-16" Style="height: 100%; min-height: 100vh;" >
<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Mi cuenta</MudText>
<MudTabs Elevation="25" Color="Color.Transparent" Rounded="true" PanelClass="mt-6" Class="@(themeService._isDarkMode ? "card-dark pl-6 pr-6 pb-6":"card-light pl-6 pr-6 pb-6")">
    <!--PANEL DE USER-->
    <MudTabPanel Text="General" >
        <MudGrid>
            <MudItem xs="12" sm="4" md="3">
                <MudCard Elevation="25" Class="@(themeService._isDarkMode ? "card-dark" : "card-light")">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText>Public Profile</MudText> @*quizas aqui poner lo el nombre de usuario y quitarlo de el otro lado*@   
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex justify-center mb-4">
                            <MudAvatar Style="height:100px; width:100px;">
                                @if(AvatarImageLink != "")
                                {
                                    <MudImage Src="@AvatarImageLink" >
                                    </MudImage>
                                }else{
                                    <MudIcon Icon="@AvatarIcon" Size="Size.Large"></MudIcon>
                                }
                            </MudAvatar>
                                
                        </div>
                        <MudText Align="Align.Center">@authService.Username</MudText>
                    </MudCardContent>
                    <MudCardActions Class="d-flex justify-center">                        
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="8" md="9">
                <MudCard Elevation="25" Class="@(themeService._isDarkMode ? "card-dark" : "card-light")">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText>Profile Details</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="FirstName" Label="Nombre" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="LastName" Label="Apellido" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="Username" Label="Username" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="Email" Label="Email" Variant="Variant.Outlined" HelperText="Dont worry, we shall not spam!" InputType="InputType.Email" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudText>
                                    <b>Visible Only To Friends</b>
                                </MudText>
                                <MudText Typo="Typo.body2">
                                   
                                </MudText>
                            </MudItem>
                        </MudGrid>

                    </MudCardContent>
                    <MudCardActions Class="pb-4 pl-4">
                        @inject IDialogService DialogService
                        <MudButton @onclick="OpenDialogAsync" Variant="Variant.Filled" Color="Color.Primary">Cambiar foto de perfil</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    <!-- PANEL DE NOTIFICACIONES -->
<MudTabPanel Text="Friend Requests">
    <MudCard Class="@(themeService._isDarkMode ? "card-dark" : "card-light")" Elevation="4">
        <MudCardContent>
            <MudGrid>
                @if (listaNotis.Count == 0)
                {
                    <MudItem xs="12">
                        <MudText>No tienes solicitudes de amistad pendientes.</MudText>
                    </MudItem>
                }
                @foreach (var noti in listaNotis)
                {
                    <MudItem xs="12" class="mb-3">
                        <MudCard Elevation="6" Class="@(themeService._isDarkMode ? "card-dark" : "card-light")">
                            <MudCardContent Class="px-4 py-3">
                                <div class="d-flex flex-column flex-md-row justify-between align-center gap-3">
                                    <MudText Typo="Typo.subtitle1" Class="font-weight-bold">
                                        @noti.Message
                                    </MudText>

                                    <div class="d-flex gap-2">
                                        <MudButton Variant="Variant.Filled"
                                                   Color="Color.Success"
                                                   Size="Size.Small"
                                                   StartIcon="@Icons.Material.Filled.Check"
                                                   @onclick="@(() => InteracionFriend(noti, "Friend accepted",true, MudBlazor.Severity.Success))">
                                            Accept
                                        </MudButton>

                                        <MudButton Variant="Variant.Filled"
                                                   Color="Color.Error"
                                                   Size="Size.Small"
                                                   StartIcon="@Icons.Material.Filled.Close"
                                                   @onclick="@(() => InteracionFriend(noti, "Friend request rejected",false, MudBlazor.Severity.Error))">
                                            Reject
                                        </MudButton>
                                    </div>
                                </div>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudCardContent>
    </MudCard>
</MudTabPanel>

    @* PANEL DE COLEGUIS  *@
    <MudTabPanel Text="Friends">
        <MudCard Class="@(themeService._isDarkMode ? "card-dark" : "card-light")">
            
            <MudCardContent >
                <MudGrid>
                    @if (listaAmigos.Count == 0)
                    {
                        <MudItem xs="12">
                            <MudText>No tienes amigos aún. ¡Empieza a hacer amigos!</MudText>
                        </MudItem>
                    }
                    @foreach (var friend in listaAmigos)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="2" class="mb-4 ">
                            <MudCard Elevation="5" Class="mb-4 profile-card " >
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <div class="d-flex align-center justify-center">
                                            <MudAvatar Size="Size.Large">
                                                @if(friend.FotoPerfil != "")
                                                {
                                                    <MudImage Src="@friend.FotoPerfil" Alt="@friend.Username"></MudImage>
                                                }else{
                                                    <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large"></MudIcon>
                                                }
                                            </MudAvatar>
                                        </div>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="d-flex flex-column align-center">
                                    <MudText>@friend.Username</MudText>
                                </MudCardContent>
                                <MudCardActions Class="pb-4 pl-4 justify-center">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="d-flex flex-column align-center" >Send Message</MudButton>
                                </MudCardActions>
                                <MudCardActions Class="pb-4 pl-4 justify-center">
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" Class="d-flex flex-column align-center" @onclick="() => RemoveFriend(friend.Username)">Remove Friend</MudButton>
                                    @* <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="d-flex flex-column align-center">Remove Friend</MudButton> *@
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudTabPanel>
</MudTabs>
</MudContainer>

@code {
    //quitar variables y usar authservice. 
    public string AvatarImageLink { get; set; } 
    public string AvatarIcon { get; set; } = Icons.Material.Outlined.Person;
    public string AvatarButtonText { get; set; } = "Delete Picture";
    public Color AvatarButtonColor { get; set; } = Color.Error;
    public string FirstName { get; set; } = "";
    public string LastName { get; set; } = "";
    public string Username { get; set; } = "";
    public string Email { get; set; } = "";
    public List<Amigos> listaAmigos { get; set; } = new List<Amigos>();
    public List<FriendRequest> listaNotis { get; set; } = new List<FriendRequest>();
    
    void DeletePicture()
    {
        if(!String.IsNullOrEmpty(AvatarImageLink))
        {
            AvatarImageLink = null;
            AvatarIcon = Icons.Material.Outlined.SentimentVeryDissatisfied;
            AvatarButtonText = "Upload Picture";
            AvatarButtonColor = Color.Primary;
        }
        else
        {
            return;
        }
    }

    void SaveChanges(string message, MudBlazor.Severity severity )
    {
        Snackbar.Add(message, severity, config =>
        {
            config.ShowCloseIcon = false;
        });
    }
    async void InteracionFriend(FriendRequest notificacion, string message, bool accepted, MudBlazor.Severity severity)
    {
        SaveChanges(message, severity);

        bool response = await ClienteService.MakeFriendAsync(authService.Username, notificacion.SenderUsername, accepted);
        if(response)
        {   
            if (accepted)
            {
            authService.Amigos.Add(notificacion.SenderUsername);
            listaAmigos = await ClienteService.ObtenerAmigosAsync(authService.Amigos);}
            listaNotis.Remove(notificacion);
            // Enviar notificación al otro usuario
            chatService.EnviarNotificacionAlGlobalHub(new Evento
            {
                Tipo = "AmigoAceptado",
                UserNameOrigen = authService.Username,
                UserNameDestino = notificacion.SenderUsername,
                Accepted = accepted,
                Mensaje = $"{authService.Username} ha aceptado tu solicitud de amistad."
            });
        }
        else
        {
            Snackbar.Add("Error processing friend request", MudBlazor.Severity.Error);
        }
        StateHasChanged();
    }

    async void RemoveFriend(string friendUsername)
    {
            SaveChanges("Friend removed", MudBlazor.Severity.Warning);
           await ClienteService.EliminarAmigoAsync(authService.Username, friendUsername);
            authService.Amigos.Remove(friendUsername);
            listaAmigos.RemoveAll(f => f.Username == friendUsername);
            //forzar recarga porque no me lo muestra que en efecto lo esta borrando
            //mandamos un mensaje popr signal para que el otro usuario sepa que le hemos borrado y recargue
            chatService.EnviarNotificacionAlGlobalHub(new Evento
            {
                Tipo = "AmigoBorrado",
                UserNameOrigen = authService.Username,
                UserNameDestino = friendUsername,
                Mensaje = $"{authService.Username} te ha eliminado de su lista de amigos."
            });
            StateHasChanged();
    }

    public Task  OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true , CloseButton= true};

        return DialogService.ShowAsync<Modal>("Cambia foto de perfil", options);
    }

    

    
    protected override async Task OnInitializedAsync()
    {   
        if(!authService.IsAuthenticated){
            NavigationManager.NavigateTo("/", forceLoad: false);
        }else{
            FirstName = authService.Nombre;
            AvatarImageLink = authService.ImagenBase64;
            LastName = authService.Apellido;
            Username = authService.Username;
            Email = authService.Email;
            listaAmigos = await ClienteService.ObtenerAmigosAsync(authService.Amigos);
            listaNotis = await ClienteService.ObtenerNotisAsync(authService.Username);
        }
    }
     protected override void OnInitialized()
    {
        themeService.OnThemeChanged += ThemeChanged;
    }

    private void ThemeChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        themeService.OnThemeChanged -= ThemeChanged;
    }

}