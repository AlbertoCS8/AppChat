@page "/chats"
@implements IDisposable

<PageTitle>Xhats</PageTitle>

@using pruebaMudBlazor.Client.Models
@using pruebaMudBlazor.Client.Services
@inject IClienteService ClienteService
@inject NavigationManager NavigationManager
@inject AuthService authService
@inject pruebaMudBlazor.Client.Services.ChatService chatService
@* @inject UsersConnected usersConnected *@

<div class="d-flex flex-grow-1 flex-row">
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudPaper Elevation="25" Class="pa-3 mr-6" MinWidth="250px">
            <MudText Typo="Typo.h6" Class="mb-4">Tus Contactos</MudText>
            
            @if (listaAmigos == null || !listaAmigos.Any())
            {
                <MudAlert Severity="MudBlazor.Severity.Info" Variant="Variant.Filled" Class="my-2">
                    No tienes amigos en tu lista de contactos.
                </MudAlert>
                <MudButton 
                    Variant="Variant.Filled" 
                    Color="Color.Secondary" 
                    FullWidth="true" 
                    EndIcon="@Icons.Material.Filled.PersonAdd"
                    Href="/search"
                    Class="mt-4">
                    Buscar Amigos
                </MudButton>
            }
            else
            {
                <div class="d-flex flex-column gap-2">
                    @foreach (var friend in listaAmigos)
                    {
                        <MudCard Elevation="2" Class="pa-2 friend-card" @onclick="() => SelectFriend(friend)">
                            <div class="d-flex align-center">
                                <MudAvatar Size="Size.Large" Class="mr-3">
                                    @if (!string.IsNullOrEmpty(friend.FotoPerfil))
                                    {
                                        <MudImage Src="@friend.FotoPerfil" Alt="@friend.Username" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Person" />
                                    }
                                </MudAvatar>
                                <div class="flex-grow-1">
                                    <MudText Typo="Typo.body1">@friend.Username</MudText>
                                    <MudText Typo="Typo.caption" Color="@(friend.Status == "En línea" ? Color.Success : Color.Default)">
                                        @friend.Status
                                    </MudText>
                                </div>
                                <MudBadge Content="@GetUnreadCount(friend)" Color="Color.Error" 
                                         Visible="@(GetUnreadCount(friend) > 0)" 
                                         Overlap="true" Class="ml-2">
                                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Chat"
                                                  Color="@(selectedFriend?.Username == friend.Username ? Color.Primary : Color.Default)" />
                                </MudBadge>
                            </div>
                        </MudCard>
                    }
                </div>
            }
        </MudPaper>
    </MudHidden>
    <MudPaper Elevation="25" Class="py-4 flex-grow-1">
        <MudToolBar Dense="true">
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudIconButton OnClick="@(() => OpenDrawer(Anchor.Left))" Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Class="mr-2 ml-n2" />
            </MudHidden>
            <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText>
            <MudText Typo="Typo.h6">chat</MudText>
            <MudToolBarSpacer />
            <MudIconButton Icon="@Icons.Material.Outlined.Notifications" />
            <MudIconButton Icon="@Icons.Material.Outlined.PushPin" />
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudIconButton OnClick="@(() => OpenDrawer(Anchor.Right))" Icon="@Icons.Material.Outlined.PeopleAlt" Color="Color.Inherit" Class="ml-3" />
            </MudHidden>
        </MudToolBar>
        <div class="d-flex flex-column px-4" style="max-height:800px; overflow:scroll;">
           @foreach (var message in chatMessages)
{
    <div class="@(message.UserName == authService.Username ? "d-flex justify-end mb-2" : "d-flex mb-2")">
        @if (message.UserName != authService.Username) // El mensaje no es mio por tanto lo saco de selectedFriend
        {
            <MudAvatar Size="Size.Medium" Class="mr-2">
                @if (string.IsNullOrEmpty(message.profileImg) && selectedFriend != null)
                {//signalR no soporta pasarle una imagen en base 64a cholon por tanto hayq ue tirar de picaresca
                    //<MudImage Src="@message.profileImg" />
                    //usamos la mmisma logica para determinar si el mensaje es nuestro o del amigo y depende
                    //de eso sacamos la imagen de authService o de selectedFriend
          
                        //Console.WriteLine("entramos por el if osea que la imagen es de selectedFriend",selectedFriend.FotoPerfil);
                        //<MudImage Src="@selectedFriend.FotoPerfil" Alt="@message.UserName" />
                        @if (string.IsNullOrEmpty(selectedFriend.FotoPerfil))
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Person" />
                        } else
                        {
                            <MudImage Src="@selectedFriend.FotoPerfil" Alt="@message.UserName" />
                        }
                }
            </MudAvatar>
        }
        
        <MudPaper Elevation="3" 
                 Class="@(message.UserName == authService.Username ? "mud-theme-primary pa-2" : "pa-2")" 
                 Style="max-width: 80%; border-radius: 12px;">
            <MudText>@message.Message</MudText>
            <MudText Typo="Typo.caption" Class="d-flex justify-end mt-1">
                @message.Time
            </MudText>
        </MudPaper>
        @if (message.UserName == authService.Username) // el mensaje es mio por tanto lo saco de authService
        {
            <MudAvatar Size="Size.Medium" Class="ml-2">
                @if (string.IsNullOrEmpty(authService.ImagenBase64))
                {
                    <MudIcon Icon="@Icons.Material.Filled.Person" />
                }else
                {
                    <MudImage Src="@authService.ImagenBase64" Alt="@message.UserName" />
                }
            </MudAvatar>
    }        
    </div>
}
        </div>
        <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="background-color: var(--mud-palette-background-grey);">
            <MudIconButton Icon="@Icons.Material.Filled.AddCircle"></MudIconButton>
            <MudTextField @bind-Value="mensajeNuevo" Placeholder="Escribe un mensaje" DisableUnderLine="true" 
                 Class="mt-n2 mx-4" ></MudTextField>
            <MudIconButton Icon="@Icons.Material.Filled.Send" 
                  Color="Color.Primary"
                  OnClick="@(() => EnviarMensaje(mensajeNuevo))"
                  Disabled="@string.IsNullOrWhiteSpace(mensajeNuevo)">
            </MudIconButton>
        </MudPaper>
    </MudPaper>
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudPaper Elevation="25" Class="pa-3 pb-16 ml-6" MinWidth="250px">
            <ChatUsers chatUsers="chatUsers" />
        </MudPaper>
    </MudHidden>
</div>

<MudDrawer @bind-Open="@open" Anchor="@ChatDrawer" Elevation="1" Variant="@DrawerVariant.Temporary">
    @if (ChatDrawer == Anchor.Left)
    {
        <MudButton EndIcon="@Icons.Material.Filled.Add" Color="Color.Secondary" Class="mx-4 mt-6 mb-4">Create Channel</MudButton>
        <ChatChannels />
    }
    else if (ChatDrawer == Anchor.Right)
    {
        <div class="pa-3">
            <ChatUsers chatUsers="chatUsers" />
        </div>
    }
</MudDrawer>

<style>
    .friend-card {
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .friend-card:hover {
        background-color: var(--mud-palette-background-grey);
    }
    .selected-friend {
        background-color: var(--mud-palette-primary-lighten);
        border-left: 3px solid var(--mud-palette-primary);
    }
</style>

@code
{
    bool open;
    bool conectadoA_unaSala;
    bool _isSubscribedToUserConnection = false;
    public List<Amigos> listaAmigos { get; set; } = new List<Amigos>();
    private Amigos selectedFriend; // amigo seleccionado, lo pasare a el tema del chathub para renderizar
    //el tema de la imagen de perfil
    private UsersConnected usersConnected;
    private string mensajeNuevo = string.Empty;
    string roomName = string.Empty;
    public List<ChatMessage> chatMessages = new List<ChatMessage>();
     public string IconGift { get; set; } = "<path d=\"M22,12V20A2,2 0 0,1 20,22H4A2,2 0 0,1 2,20V12A1,1 0 0,1 1,11V8A2,2 0 0,1 3,6H6.17C6.06,5.69 6,5.35 6,5A3,3 0 0,1 9,2C10,2 10.88,2.5 11.43,3.24V3.23L12,4L12.57,3.23V3.24C13.12,2.5 14,2 15,2A3,3 0 0,1 18,5C18,5.35 17.94,5.69 17.83,6H21A2,2 0 0,1 23,8V11A1,1 0 0,1 22,12M4,20H11V12H4V20M20,20V12H13V20H20M9,4A1,1 0 0,0 8,5A1,1 0 0,0 9,6A1,1 0 0,0 10,5A1,1 0 0,0 9,4M15,4A1,1 0 0,0 14,5A1,1 0 0,0 15,6A1,1 0 0,0 16,5A1,1 0 0,0 15,4M3,8V10H11V8H3M13,8V10H21V8H13Z\" />";
    public string IconGif { get; set; } = "<path d=\"M11,8H13V16H11V8M7.67,8H4.33C3.53,8 3,8.67 3,9.33V14.67C3,15.33 3.53,16 4.33,16H7.67C8.47,16 9,15.33 9,14.67V12H7V14H5V10H9V9.33C9,8.67 8.47,8 7.67,8M21,10V8H15V16H17V14H19.5V12H17V10H21Z\" />";
    public string roomResponsable { get; set; } = string.Empty;
    Anchor ChatDrawer { get; set; }

    ChatUser[] chatUsers = new ChatUser[]
{
        new ChatUser { UserName = "Garderoben", UserRoleColor = Colors.DeepPurple.Accent4, OnlineStatus = Color.Success, Spotify = true, AvatarUrl = "https://avatars2.githubusercontent.com/u/10367109?s=460&amp;u=2abf95f9e01132e8e2915def42895ffe99c5d2c6&amp;v=4"},
};

    
    public ChatUser GetUser(string username)
    {
        var chatUser = chatUsers.FirstOrDefault(x => x.UserName == username);
        return chatUser;
    }
    void OpenDrawer(Anchor anchor)
    {
        ChatDrawer = anchor;
        open = true;
    }
    protected override async Task OnInitializedAsync()
    {
        listaAmigos = await ClienteService.ObtenerAmigosAsync(authService.Amigos);
        @* chatService.ObsUserConnection -= OnUserConnection;//desuscripcion
        chatService.ObsUserConnection += OnUserConnection;//suscripcion *@
          if (!_isSubscribedToUserConnection)
    {
        chatService.ObsUserConnection += OnUserConnection;
        _isSubscribedToUserConnection = true;
    }
        //base.OnInitialized; //
    } 
    private void SelectFriend(Amigos friend)
    {
        @* Console.WriteLine($"Amigo seleccionado: {friend.Username}");
        Console.WriteLine($"Foto del amigo seleccionado: {friend.FotoPerfil}"); *@
        iniciarChat(friend);
        //pendienteeeeeeeee
    }
    private async Task loadChatMessages(Amigos friend)
    {
        // Implementar la carga de mensajes del chat aquí
        // Esto podría ser una llamada a un servicio para obtener los mensajes del amigo seleccionado
        Console.WriteLine($"Cargando mensajes para: {friend.Username}");
        @* clienteService.cargarMensajes(friend.Username); *@
        
    }
    private async Task iniciarChat(Amigos friend)
    {
        try
        {
            // Desuscribirse de eventos anteriores
            if (chatService.ObsMensajeRecibido != null)
            {
                chatService.ObsMensajeRecibido -= OnMensajeRecibido;
            }
            
            selectedFriend = friend;
            
            // Calcular el nombre de la sala
            roomName = string.Compare(authService.Username, friend.Username) < 0
                ? $"{authService.Username}_{friend.Username}"
                : $"{friend.Username}_{authService.Username}";
                
            // Suscribirse al evento de mensajes recibidos
            chatService.ObsMensajeRecibido += OnMensajeRecibido;
            
            // Conectar al hub y obtener la conexión
            var connection = await chatService.ConnectToHub(authService.Username, roomName);
            
            // Obtener mensajes usando la misma conexión
            chatMessages = await chatService.GetChatMessagesAsync(roomName, connection);
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al iniciar chat: {ex.Message}");
        }
    }
    private void OnMensajeRecibido(ChatMessage message)
{
    // Aquí puedes manejar la recepción de mensajes
    Console.WriteLine($"Mensaje recibido en el front: {message.Message}, de parte de {message.UserName}");
    
    // Agregamos el mensaje al array
    chatMessages.Add(message);
    
    // Como estamos en un callback de evento, necesitamos invocar StateHasChanged de manera segura
    InvokeAsync(StateHasChanged);
}
    private async void OnUserConnection(string username, string isConnected)// isConnected = En línea
    {
        // Aquí puedes manejar la conexión/desconexión de usuarios
        Console.WriteLine($"Usuario {username} {(isConnected == "En línea" ? "conectado" : "desconectado")}");
        @* usersConnected.registConnection(username, isConnected); *@
        // Actualizar la lista de amigos con el estado de conexión
        @* if (listaAmigos == null || listaAmigos.Count == 0)
        {
            Console.WriteLine("⚠️ La lista de amigos está vacía o no ha sido cargada aún.");
            return;
        } *@
        @* foreach (var amigo in listaAmigos)
        {
            Console.WriteLine($"Amigo: {amigo.Username}, Estado: {amigo.Status}");
        } *@
        var friend = listaAmigos.FirstOrDefault(f => f.Username == username);
        if (friend != null)
        {
            @* Console.WriteLine($"Actualizando estado de conexión para {friend}"); *@
            friend.Status = isConnected;
            StateHasChanged();
        }else
        {
            @* Console.WriteLine($"No se encontró el amigo {username} en la lista de amigos."); *@
        }
    }
    
    
    public void EnviarMensaje(string mensaje){
        // Implementar la lógica para enviar un mensaje al amigo seleccionado
        Console.WriteLine($"Enviando mensaje a {selectedFriend.Username}: {mensaje} quer tiene de img de perfil {authService.ImagenBase64}");
        //enviaremos el selectedFriend y una clase ChatMessage con el username, el mensaje , el base64 de la de perfil yl el time
        ChatMessage mensajeRenderiz = new ChatMessage {  UserName= authService.Username, Message= mensaje, Time= DateTime.Now.ToString("hh:mm tt") };
        //solo necesito el mensaje porque el username ya lo estoy pasando
        chatService.SendMessage(roomName, mensajeRenderiz);
        //guardamos el mensaje en BD para persistirlo
        chatMessages.Add(mensajeRenderiz);
        mensajeNuevo = string.Empty; // Limpiar el campo de entrada después de enviar el mensaje
        StateHasChanged(); // Actualiza la UI
        
    }
    private int GetUnreadCount(Amigos friend)
    {
        //mensajes non leidos, pensar en comom hacero
        return new Random().Next(0, 5);
    }
    public async void Dispose()
{
    if (chatService.ObsMensajeRecibido != null)
    {
        chatService.ObsMensajeRecibido -= OnMensajeRecibido;
    }
   //logica para recibir quien es el responsable
   @* roomResponsable = await chatService.ObtenerResponsableAsync(roomName); *@
   chatService.ObsUserConnection -= OnUserConnection;
    }
    // Aqui se puede hacer algo con el responsable, como mostrarlo en la UI o guardarlo en una variable
   //Console.WriteLine($"Responsable de la sala {roomName}: {roomResponsable}");
    /*Ejemplo de api de musblazor del chat que quiero
    <MudGrid>
    <MudItem xs="12" Class="justify-center">
        <MudStack>
            <MudStack Row>
                <MudCheckBox Label="Dense" @bind-Value="_dense" />
                <MudCheckBox Label="Square" @bind-Value="_square" />
            </MudStack>
            <MudRadioGroup @bind-Value="_variant">
                <MudRadio Value="@Variant.Text" Label="Text" />
                <MudRadio Value="@Variant.Outlined" Label="Outlined" />
                <MudRadio Value="@Variant.Filled" Label="Filled" />
            </MudRadioGroup>
            <MudStack Row Class="ml-4" Style="max-width:600px;">
                <MudSelect Class="mr-1" T="MudBlazor.Color" Label="Chat Color" @bind-Value="_selectedColor">
                    @foreach (MudBlazor.Color color in Enum.GetValues(typeof(MudBlazor.Color)))
                    {
                        <MudSelectItem Value="@color">@color.ToString()</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="MudBlazor.ChatArrowPosition" Label="Chat Arrow" @bind-Value="_selectedArrowPosition">
                    @foreach (MudBlazor.ChatArrowPosition pos in Enum.GetValues(typeof(MudBlazor.ChatArrowPosition)))
                    {
                        <MudSelectItem Value="@pos">@pos.ToString()</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
            <MudSlider @bind-Value="_elevation" Min="0" Max="25" Color="Color.Info" Class="ml-4 mb-6" Style="max-width:600px;">Elevation: @_elevation.ToString()</MudSlider>
        </MudStack>
    </MudItem>
</MudGrid>

<MudChat Color="_selectedColor" Dense="@_dense" Elevation="@_elevation" Variant="@_variant" Square="_square" ArrowPosition="_selectedArrowPosition" ChatPosition="ChatBubblePosition.Start">
    <MudChatHeader Name="Anakin" Time="12:46" />
    <MudAvatar Size="@(_dense ? Size.Small : Size.Medium)">
        <MudImage Src="images/toiletvisit.jpg" />
    </MudAvatar>
    <MudChatBubble>What kind of nonsense is this</MudChatBubble>
    <MudChatBubble>Put me on the Council and not make me a Master!??</MudChatBubble>
    <MudChatBubble>That's never been done in the history of the Jedi. It's insulting!</MudChatBubble>
    <MudChatFooter Text="Seen at 12:46" />
</MudChat>

<MudChat Color="_selectedColor" Dense="@_dense" Elevation="@_elevation" Variant="@_variant" Square="_square" ArrowPosition="_selectedArrowPosition" ChatPosition="ChatBubblePosition.End">
    <MudChatHeader Name="Obi-Wan Kenobi" Time="12:45" />
    <MudAvatar Size="@(_dense ? Size.Small : Size.Medium)">
        <MudImage Src="images/jonny.jpg" />
    </MudAvatar>
    <MudChatBubble>Calm down, Anakin. You have been given a great honor. <br/> To be on the Council at your age.</MudChatBubble>
    <MudChatBubble Color="Color.Primary">It's never happened before.</MudChatBubble>
    <MudChatFooter Text="Delivered" />
</MudChat>

@code {
    private bool _dense = true;
    private bool _square = false;
    private int _elevation = 5;
    private Variant _variant = Variant.Text;
    private Color _selectedColor = Color.Default;
    private ChatArrowPosition _selectedArrowPosition = ChatArrowPosition.Top;
}
    */

}