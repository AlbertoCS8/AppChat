@inherits LayoutComponentBase
@inject AuthService authService
@inject ThemeService themeService
@inject NavigationManager Navigation
@inject pruebaMudBlazor.Client.Services.ChatService chatService
@inject ISnackbar SnackBar

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout Class="@GetThemeSelected()">
    <MudAppBar Elevation="1">
        @if (authService.IsAuthenticated)
        {
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudIcon Icon="@Icons.Custom.Brands.Awesome" Size="Size.Large" Class="pr-2" />
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.Xs">
                <MudText Typo="Typo.h6" Class="ml-4">Zirty</MudText>
            </MudHidden>
            <MudSpacer />
            <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
            <MudNavLink Href="personal/account" Icon="@Icons.Material.Filled.AccountCircle">Mi perfil</MudNavLink>
        <MudNavLink Href="chats" Icon="@Icons.Material.Filled.Chat">Chats</MudNavLink>
        <MudNavLink Href="search" Icon="@Icons.Material.Filled.PersonAdd">Buscar amigos</MudNavLink>
    <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" 
         Dense="true" Direction="Direction.Bottom" OffsetY="true"
         Style="z-index: 9999">
    <ActivatorContent>
        <MudAvatar Size="Size.Medium" Class="ml-4 cursor-pointer" @onclick="() => {}">
            @if (!string.IsNullOrEmpty(authService.ImagenBase64))
            {
                <MudImage Src="@authService.ImagenBase64" Alt="Foto de perfil" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Person" />
            }
        </MudAvatar>
    </ActivatorContent>
    <ChildContent>
        <MudText Class="pa-2" Typo="Typo.subtitle2">@authService.Username</MudText>
        <MudDivider />
        <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
        <MudNavLink Href="personal/account" Icon="@Icons.Material.Filled.AccountCircle">Mi perfil</MudNavLink>
        <MudNavLink Href="chats" Icon="@Icons.Material.Filled.Chat">Chats</MudNavLink>
        <MudNavLink Href="search" Icon="@Icons.Material.Filled.PersonAdd">Buscar amigos</MudNavLink>
        <MudDivider />
        <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="@Logout">Cerrar sesión</MudMenuItem>
    </ChildContent>
</MudMenu>
        }
        else
        {
            @* <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" /> *@
            <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
        }
    </MudAppBar>
    @* <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Lista de amigos</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer> Vestigios de ideas pasadas 
    *@
    <MudMainContent Class="pa-4 mudblazor-main-content">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = false;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private string _themeSelected = "";
    private bool _yaSuscrito = false;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (themeService == null)
        {
            ThemeService themeService = new ThemeService();
        }
        _isDarkMode = themeService.GetTheme();

        _theme = new MudTheme
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
        if (_isDarkMode)
        {
            _themeSelected = "degradado-dark";
            themeService.SetTheme(_isDarkMode);
        }
        else
        {
            _themeSelected = "degradado-light";
            themeService.SetTheme(_isDarkMode);
        }
        if (!_yaSuscrito)
    {
    Console.WriteLine("Suscribiendo a eventos de notificación");
        chatService.ObsNotificacionRecibida += (notificacion) => //estos eventos controlaran los cambios que no quiero que dependan
        // de conctantes querys a la bdd, me explico: mi aplicacion tiene un servicio authService que es un singleton que se 
        // carga cuando entro a la app con casi todos los datos que necesita pero yo no quiero que cada vez que entre a un chat
        // le pida al server los amigos,pues pensé como puedo hacer que siempre tenga los amigos actualizados sin tener que
        // estar haciendo querys al server? pues con eventos, entonces cada vez que se añade un amigo, se borra, se recibe un mensaje
        // o se recibe una solicitud de amistad, se dispara un evento que actualiza el servicio authService y por tanto
        // actualiza los componentes que lo usan o el usuario recibe una notificación en forma de snackbar asi moderno...
        {
            if(notificacion.Tipo == "NuevoAmigo")
            {
                SnackBar.Add($"Tienes una nueva solicitud de amistad", MudBlazor.Severity.Info);
            }else if(notificacion.Tipo == "NuevoMensaje")
            {
                Console.WriteLine($"Nuevo mensaje de {notificacion.UserNameOrigen} a {notificacion.UserNameDestino}");
                @* SnackBar.Add($"Tienes un nuevo mensaje", MudBlazor.Severity.Info); *@
                //modificamos authService para que tenga una propiedad que almacene el chat al que pertenece el mensaje
                //vamos a recibir un objeto notificacion que es un Evento y ahi pillamos el nombre de quien nos lo manda, lo buscamos
                //en nuestro diccionario y le sumamos uno a los mensajes no leidos
                if (authService.MensajesNoLeidos.ContainsKey(notificacion.UserNameOrigen))
                {
                    authService.MensajesNoLeidos[notificacion.UserNameOrigen]++;
                    @* StateHasChanged(); *@
                    authService.NotificarCambio("NuevoMensaje");
                }
                else
                {
                    //no pongo nada porque no vamos a recibir un mensaje de alguien que no sea amigo por como hemos montado la app
                }
            }else if(notificacion.Tipo == "AmigoBorrado")
            {
                SnackBar.Add($"Tu amigo {notificacion.UserNameOrigen} te ha borrado", MudBlazor.Severity.Warning);
                authService.Amigos.Remove(notificacion.UserNameOrigen);
                @* StateHasChanged(); No recarga hijos que seria chats.razor entonces llamamos al evento de authService y 
                ponemos un observable en chats.razor y fuera --> al final estaba fallando en otra coosa asique no se si esto
                es verdad jajaj *@
                authService.NotificarCambio("CambiosListaAmigos");
            }else if (notificacion.Tipo == "AmigoAceptado")
            {
                @* SnackBar.Add($"Tu solicitud de amistad ha sido aceptada por {notificacion.UserNameOrigen}", MudBlazor.Severity.Success); *@
                authService.Amigos.Add(notificacion.UserNameOrigen);
                authService.NotificarCambio("CambiosListaAmigos");
            }
            else if (notificacion.Tipo == "SolicitudAmistad")
            {
                SnackBar.Add($"Tienes una nueva solicitud de amistad de {notificacion.UserNameOrigen}", MudBlazor.Severity.Info);
            }

            
            
        };
                _yaSuscrito = true;

    }}

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        themeService.SetTheme(_isDarkMode);
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        @* TextPrimary = "#000000", tendría que cambiar el color de los iconos tbn conforme al tema, futura actualizacion
        TextSecondary = "#000000", *@
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
        @* --mud-palette-primary
rgb(66 124 161)
: rgb(66 124 161); *@
        Primary = "#4284a1",

    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Secondary = "#ffffff",
        Surface = "#1e1e2d",
        Background = "#00000000", //background de la app desde extremos al card, justo lo que quiero cambiar
        BackgroundGray = "#151521",
        AppbarText = "#ffffff",
        AppbarBackground = "00000000",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#ffffff",
        TextSecondary = "#ffffff",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string GetThemeSelected()
    {
        return _isDarkMode ? "degradado-dark" : "degradado-light";
    }
    public string DarkLightModeButtonIcon => _isDarkMode
        ? Icons.Material.Outlined.DarkMode
        : Icons.Material.Filled.WbSunny;
    private void Logout()
    {
        chatService.DisconnectFromGlobalHub(authService.Username);
        authService.IsAuthenticated = false;
        authService.Username = string.Empty;
        authService.ImagenBase64 = string.Empty;
        authService.Email = string.Empty;
        authService.Nombre = string.Empty;
        authService.Apellido = string.Empty;
        authService.Amigos.Clear();
        Navigation.NavigateTo("/");
    }
}
